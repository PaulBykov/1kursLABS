; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30147.0 

	TITLE	d:\labs\kpo\1\consoleapplication1\release\consoleapplication1.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_03OJJHGHEE@Rus@				; `string'
PUBLIC	??_C@_0CA@DCOGFNOO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_0BL@BCKHDGFB@?B?b?e?d?e?m?$PL?5?m?e?j?n?p?e?j?r?m?$PL?e?5?d?$OA?m?m?$PL?e@ ; `string'
PUBLIC	??_C@_0BG@MBMBOIKA@?D?$OA?m?m?$PL?i?5?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i@ ; `string'
PUBLIC	??_C@_0BJ@HJAEKLCB@?D?$OA?m?m?$PL?i?5?c?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i@ ; `string'
PUBLIC	??_C@_0BP@GMPPFCEC@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?5?$DN?5@ ; `string'
PUBLIC	??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@ ; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:PROC
EXTRN	__imp_?is@?$ctype@D@std@@QBE_NFD@Z:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	__imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp____std_exception_destroy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp____std_exception_copy:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?rdstate@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp____std_terminate:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp__system:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp__setlocale:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__imp____CxxFrameHandler3:PROC
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@
CONST	SEGMENT
??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@ DB 0c4H
	DB	0edH, 0e5H, 0e9H, ' ', 0e4H, 0eeH, ' ', 0e1H, 0ebH, 0e8H, 0e6H
	DB	0e0H, 0e9H, 0f8H, 0e5H, 0e3H, 0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H
	DB	0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GMPPFCEC@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?5?$DN?5@
CONST	SEGMENT
??_C@_0BP@GMPPFCEC@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?5?$DN?5@ DB 0cfH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, ' ', 0e3H
	DB	0eeH, 0e4H, 0f3H, ' = ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HJAEKLCB@?D?$OA?m?m?$PL?i?5?c?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0BJ@HJAEKLCB@?D?$OA?m?m?$PL?i?5?c?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i@ DB 0c4H
	DB	0e0H, 0edH, 0edH, 0fbH, 0e9H, ' ', 0e3H, 0eeH, 0e4H, ' ', 0edH
	DB	0e5H, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH
	DB	0e9H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MBMBOIKA@?D?$OA?m?m?$PL?i?5?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0BG@MBMBOIKA@?D?$OA?m?m?$PL?i?5?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i@ DB 0c4H
	DB	0e0H, 0edH, 0edH, 0fbH, 0e9H, ' ', 0e3H, 0eeH, 0e4H, ' ', 0e2H
	DB	0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BCKHDGFB@?B?b?e?d?e?m?$PL?5?m?e?j?n?p?e?j?r?m?$PL?e?5?d?$OA?m?m?$PL?e@
CONST	SEGMENT
??_C@_0BL@BCKHDGFB@?B?b?e?d?e?m?$PL?5?m?e?j?n?p?e?j?r?m?$PL?e?5?d?$OA?m?m?$PL?e@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0fbH, ' ', 0edH, 0e5H, 0eaH, 0eeH
	DB	0f0H, 0e5H, 0eaH, 0f2H, 0edH, 0fbH, 0e5H, ' ', 0e4H, 0e0H, 0edH
	DB	0edH, 0fbH, 0e5H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DCOGFNOO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0CA@DCOGFNOO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJJHGHEE@Rus@
CONST	SEGMENT
??_C@_03OJJHGHEE@Rus@ DB 'Rus', 00H			; `string'
CONST	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >
PUBLIC	??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ; std::operator>><char,std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	_main
PUBLIC	?DayNum@@YAHHH_N@Z				; DayNum
PUBLIC	?isLeap@@YA_NH@Z				; isLeap
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___std_terminate:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	04H
	DD	FLAT:___std_terminate
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$6
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$3
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__tryblocktable$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z DD 03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$7
__catchsym$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp
;	COMDAT ?isLeap@@YA_NH@Z
_TEXT	SEGMENT
?isLeap@@YA_NH@Z PROC					; isLeap, COMDAT
; _year$ = ecx

; 7    : inline bool isLeap(int year) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 8    :     bool vis = false;

  00003	32 c9		 xor	 cl, cl

; 9    : 
; 10   :     if (year % 4 == 0) {

  00005	8b c6		 mov	 eax, esi
  00007	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0000c	79 07		 jns	 SHORT $LN8@isLeap
  0000e	48		 dec	 eax
  0000f	83 c8 fc	 or	 eax, -4			; fffffffcH
  00012	83 c0 01	 add	 eax, 1
$LN8@isLeap:
  00015	75 3c		 jne	 SHORT $LN7@isLeap

; 11   :         if (year % 100 == 0) {

  00017	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0001c	8b ce		 mov	 ecx, esi
  0001e	f7 ee		 imul	 esi
  00020	c1 fa 05	 sar	 edx, 5
  00023	8b c2		 mov	 eax, edx
  00025	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00028	03 c2		 add	 eax, edx
  0002a	6b c0 64	 imul	 eax, eax, 100
  0002d	2b c8		 sub	 ecx, eax
  0002f	75 1e		 jne	 SHORT $LN3@isLeap

; 12   :             if (year % 400 == 0) {

  00031	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00036	f7 ee		 imul	 esi
  00038	c1 fa 07	 sar	 edx, 7
  0003b	8b c2		 mov	 eax, edx
  0003d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00040	03 c2		 add	 eax, edx
  00042	69 c0 90 01 00
	00		 imul	 eax, eax, 400

; 13   :                 vis = true;
; 14   :             }
; 15   :         }

  00048	3b f0		 cmp	 esi, eax
  0004a	5e		 pop	 esi
  0004b	0f 94 c0	 sete	 al

; 21   : }

  0004e	c3		 ret	 0
$LN3@isLeap:

; 16   :         else {
; 17   :             vis = true;

  0004f	b0 01		 mov	 al, 1
  00051	5e		 pop	 esi

; 21   : }

  00052	c3		 ret	 0
$LN7@isLeap:

; 18   :         }
; 19   :     }
; 20   :     return vis;

  00053	8a c1		 mov	 al, cl
  00055	5e		 pop	 esi

; 21   : }

  00056	c3		 ret	 0
?isLeap@@YA_NH@Z ENDP					; isLeap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\LABS\KPO\1\ConsoleApplication1\Num.cpp
;	COMDAT ?DayNum@@YAHHH_N@Z
_TEXT	SEGMENT
_year$ = 8						; size = 1
?DayNum@@YAHHH_N@Z PROC					; DayNum, COMDAT
; _day$ = ecx
; _month$ = edx

; 7    : inline int DayNum(int day, int month, bool year) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8    :     int DayNumber = 0;

  00003	33 c0		 xor	 eax, eax
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 9    :     for (int i = 1; i < month; i++) {

  0000c	3b d6		 cmp	 edx, esi
  0000e	7e 76		 jle	 SHORT $LN31@DayNum
  00010	53		 push	 ebx
  00011	8a 5d 08	 mov	 bl, BYTE PTR _year$[ebp]
$LL4@DayNum:

; 10   : 
; 11   :         if (i == 1) {
; 12   :             DayNumber += 31;
; 13   :         }
; 14   :         if (i == 2 && year) {

  00014	83 fe 01	 cmp	 esi, 1
  00017	8d 48 1f	 lea	 ecx, DWORD PTR [eax+31]
  0001a	0f 45 c8	 cmovne	 ecx, eax
  0001d	8b c1		 mov	 eax, ecx
  0001f	83 fe 02	 cmp	 esi, 2
  00022	75 13		 jne	 SHORT $LN8@DayNum
  00024	84 db		 test	 bl, bl
  00026	74 05		 je	 SHORT $LN6@DayNum

; 15   :             DayNumber += 29;

  00028	83 c0 1d	 add	 eax, 29			; 0000001dH

; 16   :         }

  0002b	eb 53		 jmp	 SHORT $LN2@DayNum
$LN6@DayNum:

; 17   :         else if (i == 2) {

  0002d	83 fe 02	 cmp	 esi, 2
  00030	75 05		 jne	 SHORT $LN8@DayNum

; 18   :             DayNumber += 28;

  00032	83 c0 1c	 add	 eax, 28			; 0000001cH

; 19   :         }
; 20   :         if (i == 3) {

  00035	eb 49		 jmp	 SHORT $LN2@DayNum
$LN8@DayNum:
  00037	83 fe 03	 cmp	 esi, 3
  0003a	75 05		 jne	 SHORT $LN9@DayNum

; 21   :             DayNumber += 31;

  0003c	83 c0 1f	 add	 eax, 31			; 0000001fH

; 22   :         }

  0003f	eb 3f		 jmp	 SHORT $LN2@DayNum
$LN9@DayNum:

; 23   :         else if (i == 4) {

  00041	83 fe 04	 cmp	 esi, 4
  00044	74 37		 je	 SHORT $LN33@DayNum

; 24   :             DayNumber += 30;
; 25   :         }
; 26   :         else if (i == 5) {

  00046	83 fe 05	 cmp	 esi, 5
  00049	75 05		 jne	 SHORT $LN13@DayNum

; 27   :             DayNumber += 31;

  0004b	83 c0 1f	 add	 eax, 31			; 0000001fH

; 28   :         }

  0004e	eb 30		 jmp	 SHORT $LN2@DayNum
$LN13@DayNum:

; 29   :         else if (i == 6) {

  00050	83 fe 06	 cmp	 esi, 6
  00053	74 28		 je	 SHORT $LN33@DayNum

; 30   :             DayNumber += 30;
; 31   :         }
; 32   :         else if (i == 7) {

  00055	83 fe 07	 cmp	 esi, 7
  00058	75 05		 jne	 SHORT $LN17@DayNum

; 33   :             DayNumber += 31;

  0005a	83 c0 1f	 add	 eax, 31			; 0000001fH

; 34   :         }

  0005d	eb 21		 jmp	 SHORT $LN2@DayNum
$LN17@DayNum:

; 35   :         else if (i == 8) {

  0005f	83 fe 08	 cmp	 esi, 8
  00062	75 05		 jne	 SHORT $LN19@DayNum

; 36   :             DayNumber += 31;

  00064	83 c0 1f	 add	 eax, 31			; 0000001fH

; 37   :         }

  00067	eb 17		 jmp	 SHORT $LN2@DayNum
$LN19@DayNum:

; 38   :         else if (i == 9) {

  00069	83 fe 09	 cmp	 esi, 9
  0006c	74 0f		 je	 SHORT $LN33@DayNum

; 39   :             DayNumber += 30;
; 40   :         }
; 41   :         else if (i == 10) {

  0006e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00071	75 05		 jne	 SHORT $LN23@DayNum

; 42   :             DayNumber += 31;

  00073	83 c0 1f	 add	 eax, 31			; 0000001fH

; 43   :         }

  00076	eb 08		 jmp	 SHORT $LN2@DayNum
$LN23@DayNum:

; 44   :         else if (i == 11) {

  00078	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  0007b	75 03		 jne	 SHORT $LN2@DayNum
$LN33@DayNum:

; 9    :     for (int i = 1; i < month; i++) {

  0007d	83 c0 1e	 add	 eax, 30			; 0000001eH
$LN2@DayNum:
  00080	46		 inc	 esi
  00081	3b f2		 cmp	 esi, edx
  00083	7c 8f		 jl	 SHORT $LL4@DayNum

; 45   :             DayNumber += 30;
; 46   :         }
; 47   : 
; 48   :     }
; 49   : 
; 50   :     DayNumber += day;
; 51   : 
; 52   :     return DayNumber;

  00085	5b		 pop	 ebx
$LN31@DayNum:

; 53   : }

  00086	03 c7		 add	 eax, edi
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
?DayNum@@YAHHH_N@Z ENDP					; DayNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp
;	COMDAT _main
_TEXT	SEGMENT
_vis$1 = -24						; size = 1
_vis$2 = -24						; size = 1
_vis$3 = -24						; size = 1
_vis$4 = -24						; size = 1
_day$1$ = -20						; size = 4
_date$ = -16						; size = 9
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 18	 mov	 DWORD PTR __$ArrayPad$[esp+28], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi

; 10   :     char date[9];
; 11   :     setlocale(LC_ALL, "Rus");

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_03OJJHGHEE@Rus@
  0001c	6a 00		 push	 0
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00024	83 c4 08	 add	 esp, 8

; 12   :     cout << "Введите дату в формате ДДММГГГГ" << endl;

  00027	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CA@DCOGFNOO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  0002c	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00031	51		 push	 ecx
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00038	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003d	83 c4 04	 add	 esp, 4
  00040	8b c8		 mov	 ecx, eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 826  :     return _Istream_extract_into_buffer(_Istr, SIZE_MAX, _Str);

  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0004e	8d 44 24 18	 lea	 eax, DWORD PTR _date$[esp+40]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp

; 14   :     int day = (date[0] - '0') * 10 + (date[1] - '0');

  00058	0f be 44 24 1c	 movsx	 eax, BYTE PTR _date$[esp+44]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 826  :     return _Istream_extract_into_buffer(_Istr, SIZE_MAX, _Str);

  0005d	83 c4 04	 add	 esp, 4
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp

; 16   :     int year = (date[4] - '0') * 1000 + (date[5] - '0') * 100 + (date[6] - '0') * 10 + (date[7] - '0');

  00060	0f be 74 24 1f	 movsx	 esi, BYTE PTR _date$[esp+47]
  00065	81 c6 b0 2f ff
	ff		 add	 esi, -53328		; ffff2fb0H
  0006b	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0006e	0f be 44 24 19	 movsx	 eax, BYTE PTR _date$[esp+41]
  00073	8d 89 f8 fe ff
	ff		 lea	 ecx, DWORD PTR [ecx-264]
  00079	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0007c	0f be 44 24 1a	 movsx	 eax, BYTE PTR _date$[esp+42]
  00081	89 54 24 14	 mov	 DWORD PTR _day$1$[esp+40], edx
  00085	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00088	0f be 44 24 1b	 movsx	 eax, BYTE PTR _date$[esp+43]
  0008d	8d 89 f8 fe ff
	ff		 lea	 ecx, DWORD PTR [ecx-264]
  00093	8d 1c 48	 lea	 ebx, DWORD PTR [eax+ecx*2]
  00096	0f be 44 24 1c	 movsx	 eax, BYTE PTR _date$[esp+44]
  0009b	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0009e	0f be 44 24 1d	 movsx	 eax, BYTE PTR _date$[esp+45]
  000a3	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  000a6	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  000a9	0f be 44 24 1e	 movsx	 eax, BYTE PTR _date$[esp+46]
  000ae	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  000b1	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  000b4	8d 34 4e	 lea	 esi, DWORD PTR [esi+ecx*2]

; 17   :     
; 18   :     if (day > 31 || month > 12 || day < 1 || month < 1) {

  000b7	83 fa 1f	 cmp	 edx, 31			; 0000001fH
  000ba	0f 8f 8c 02 00
	00		 jg	 $LN3@main
  000c0	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  000c3	0f 8f 83 02 00
	00		 jg	 $LN3@main
  000c9	83 fa 01	 cmp	 edx, 1
  000cc	0f 8c 7a 02 00
	00		 jl	 $LN3@main
  000d2	83 fb 01	 cmp	 ebx, 1
  000d5	0f 8c 71 02 00
	00		 jl	 $LN3@main
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp

; 10   :     if (year % 4 == 0) {

  000db	8b fe		 mov	 edi, esi
  000dd	81 e7 03 00 00
	80		 and	 edi, -2147483645	; 80000003H
  000e3	79 07		 jns	 SHORT $LN44@main
  000e5	4f		 dec	 edi
  000e6	83 cf fc	 or	 edi, -4			; fffffffcH
  000e9	83 c7 01	 add	 edi, 1
$LN44@main:
  000ec	75 58		 jne	 SHORT $LN43@main

; 11   :         if (year % 100 == 0) {

  000ee	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000f3	8b ce		 mov	 ecx, esi
  000f5	f7 ee		 imul	 esi
  000f7	c1 fa 05	 sar	 edx, 5
  000fa	8b c2		 mov	 eax, edx
  000fc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ff	03 c2		 add	 eax, edx
  00101	6b c0 64	 imul	 eax, eax, 100
  00104	2b c8		 sub	 ecx, eax
  00106	75 1b		 jne	 SHORT $LN41@main

; 12   :             if (year % 400 == 0) {

  00108	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0010d	f7 ee		 imul	 esi
  0010f	c1 fa 07	 sar	 edx, 7
  00112	8b c2		 mov	 eax, edx
  00114	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00117	03 c2		 add	 eax, edx
  00119	69 c0 90 01 00
	00		 imul	 eax, eax, 400
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp

; 22   :     if (isLeap(year)) {

  0011f	3b f0		 cmp	 esi, eax
  00121	75 23		 jne	 SHORT $LN43@main
$LN41@main:

; 23   :         cout << "Данный год високосный" << endl;

  00123	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00128	51		 push	 ecx
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0012f	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BG@MBMBOIKA@?D?$OA?m?m?$PL?i?5?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i@
  00134	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00139	83 c4 04	 add	 esp, 4
  0013c	8b c8		 mov	 ecx, eax
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 24   :     }

  00144	eb 2a		 jmp	 SHORT $LN42@main
$LN43@main:

; 25   :     else {
; 26   :         cout << "Данный год не високосный" << endl;

  00146	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0014b	51		 push	 ecx
  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00152	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BJ@HJAEKLCB@?D?$OA?m?m?$PL?i?5?c?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i@
  00157	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0015c	83 c4 04	 add	 esp, 4
  0015f	8b c8		 mov	 ecx, eax
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp

; 8    :     bool vis = false;

  00167	c6 44 24 10 00	 mov	 BYTE PTR _vis$4[esp+40], 0

; 10   :     if (year % 4 == 0) {

  0016c	85 ff		 test	 edi, edi
  0016e	75 3f		 jne	 SHORT $LN20@main
$LN42@main:

; 11   :         if (year % 100 == 0) {

  00170	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00175	8b ce		 mov	 ecx, esi
  00177	f7 ee		 imul	 esi
  00179	c1 fa 05	 sar	 edx, 5
  0017c	8b c2		 mov	 eax, edx
  0017e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00181	03 c2		 add	 eax, edx
  00183	6b c0 64	 imul	 eax, eax, 100
  00186	2b c8		 sub	 ecx, eax
  00188	75 20		 jne	 SHORT $LN19@main

; 12   :             if (year % 400 == 0) {

  0018a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0018f	f7 ee		 imul	 esi
  00191	c1 fa 07	 sar	 edx, 7
  00194	8b c2		 mov	 eax, edx
  00196	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00199	03 c2		 add	 eax, edx
  0019b	69 c0 90 01 00
	00		 imul	 eax, eax, 400

; 13   :                 vis = true;
; 14   :             }
; 15   :         }

  001a1	3b f0		 cmp	 esi, eax
  001a3	0f 94 44 24 10	 sete	 BYTE PTR _vis$4[esp+40]
  001a8	eb 05		 jmp	 SHORT $LN20@main
$LN19@main:

; 16   :         else {
; 17   :             vis = true;

  001aa	c6 44 24 10 01	 mov	 BYTE PTR _vis$4[esp+40], 1
$LN20@main:
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp

; 28   :     cout << "Порядковый номер дня в году = " << DayNum(day, month, isLeap(year)) << endl;

  001af	8b 4c 24 14	 mov	 ecx, DWORD PTR _day$1$[esp+40]
  001b3	8b d3		 mov	 edx, ebx
  001b5	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001ba	ff 74 24 14	 push	 DWORD PTR _vis$4[esp+44]
  001be	e8 00 00 00 00	 call	 ?DayNum@@YAHHH_N@Z	; DayNum
  001c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001c9	83 c4 04	 add	 esp, 4
  001cc	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BP@GMPPFCEC@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?5?$DN?5@
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001d7	8b c8		 mov	 ecx, eax
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  001df	8b c8		 mov	 ecx, eax
  001e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp

; 8    :     bool vis = false;

  001e7	c6 44 24 10 00	 mov	 BYTE PTR _vis$3[esp+40], 0

; 10   :     if (year % 4 == 0) {

  001ec	85 ff		 test	 edi, edi
  001ee	75 3f		 jne	 SHORT $LN26@main

; 11   :         if (year % 100 == 0) {

  001f0	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  001f5	8b ce		 mov	 ecx, esi
  001f7	f7 ee		 imul	 esi
  001f9	c1 fa 05	 sar	 edx, 5
  001fc	8b c2		 mov	 eax, edx
  001fe	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00201	03 c2		 add	 eax, edx
  00203	6b c0 64	 imul	 eax, eax, 100
  00206	2b c8		 sub	 ecx, eax
  00208	75 20		 jne	 SHORT $LN25@main

; 12   :             if (year % 400 == 0) {

  0020a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0020f	f7 ee		 imul	 esi
  00211	c1 fa 07	 sar	 edx, 7
  00214	8b c2		 mov	 eax, edx
  00216	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00219	03 c2		 add	 eax, edx
  0021b	69 c0 90 01 00
	00		 imul	 eax, eax, 400

; 13   :                 vis = true;
; 14   :             }
; 15   :         }

  00221	3b f0		 cmp	 esi, eax
  00223	0f 94 44 24 10	 sete	 BYTE PTR _vis$3[esp+40]
  00228	eb 05		 jmp	 SHORT $LN26@main
$LN25@main:

; 16   :         else {
; 17   :             vis = true;

  0022a	c6 44 24 10 01	 mov	 BYTE PTR _vis$3[esp+40], 1
$LN26@main:
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp

; 32   :     if (264 - DayNum(day, month, isLeap(year)) >= 0) {

  0022f	ff 74 24 10	 push	 DWORD PTR _vis$3[esp+40]
  00233	8b 4c 24 18	 mov	 ecx, DWORD PTR _day$1$[esp+44]
  00237	8b d3		 mov	 edx, ebx
  00239	e8 00 00 00 00	 call	 ?DayNum@@YAHHH_N@Z	; DayNum
  0023e	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  00243	c6 44 24 14 00	 mov	 BYTE PTR _vis$2[esp+44], 0
  00248	83 c4 04	 add	 esp, 4
  0024b	2b c8		 sub	 ecx, eax
  0024d	78 59		 js	 SHORT $LN6@main
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp

; 10   :     if (year % 4 == 0) {

  0024f	85 ff		 test	 edi, edi
  00251	75 3f		 jne	 SHORT $LN32@main

; 11   :         if (year % 100 == 0) {

  00253	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00258	f7 ee		 imul	 esi
  0025a	c1 fa 05	 sar	 edx, 5
  0025d	8b ca		 mov	 ecx, edx
  0025f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00262	03 ca		 add	 ecx, edx
  00264	8b d6		 mov	 edx, esi
  00266	6b c9 64	 imul	 ecx, ecx, 100
  00269	2b d1		 sub	 edx, ecx
  0026b	75 20		 jne	 SHORT $LN31@main

; 12   :             if (year % 400 == 0) {

  0026d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00272	f7 ee		 imul	 esi
  00274	c1 fa 07	 sar	 edx, 7
  00277	8b c2		 mov	 eax, edx
  00279	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0027c	03 c2		 add	 eax, edx
  0027e	69 c0 90 01 00
	00		 imul	 eax, eax, 400

; 13   :                 vis = true;
; 14   :             }
; 15   :         }

  00284	3b f0		 cmp	 esi, eax
  00286	0f 94 44 24 10	 sete	 BYTE PTR _vis$2[esp+40]
  0028b	eb 05		 jmp	 SHORT $LN32@main
$LN31@main:

; 16   :         else {
; 17   :             vis = true;

  0028d	c6 44 24 10 01	 mov	 BYTE PTR _vis$2[esp+40], 1
$LN32@main:
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp

; 33   :         DaysUntil = 121 - DayNum(day, month, isLeap(year));

  00292	ff 74 24 10	 push	 DWORD PTR _vis$2[esp+40]
  00296	8b 4c 24 18	 mov	 ecx, DWORD PTR _day$1$[esp+44]
  0029a	8b d3		 mov	 edx, ebx
  0029c	e8 00 00 00 00	 call	 ?DayNum@@YAHHH_N@Z	; DayNum
  002a1	b9 79 00 00 00	 mov	 ecx, 121		; 00000079H

; 34   :     }

  002a6	eb 57		 jmp	 SHORT $LN45@main
$LN6@main:
; File D:\LABS\KPO\1\ConsoleApplication1\Leap.cpp

; 10   :     if (year % 4 == 0) {

  002a8	85 ff		 test	 edi, edi
  002aa	75 3f		 jne	 SHORT $LN38@main

; 11   :         if (year % 100 == 0) {

  002ac	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002b1	8b ce		 mov	 ecx, esi
  002b3	f7 ee		 imul	 esi
  002b5	c1 fa 05	 sar	 edx, 5
  002b8	8b c2		 mov	 eax, edx
  002ba	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002bd	03 c2		 add	 eax, edx
  002bf	6b c0 64	 imul	 eax, eax, 100
  002c2	2b c8		 sub	 ecx, eax
  002c4	75 20		 jne	 SHORT $LN37@main

; 12   :             if (year % 400 == 0) {

  002c6	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002cb	f7 ee		 imul	 esi
  002cd	c1 fa 07	 sar	 edx, 7
  002d0	8b c2		 mov	 eax, edx
  002d2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002d5	03 c2		 add	 eax, edx
  002d7	69 c0 90 01 00
	00		 imul	 eax, eax, 400

; 13   :                 vis = true;
; 14   :             }
; 15   :         }

  002dd	3b f0		 cmp	 esi, eax
  002df	0f 94 44 24 10	 sete	 BYTE PTR _vis$1[esp+40]
  002e4	eb 05		 jmp	 SHORT $LN38@main
$LN37@main:

; 16   :         else {
; 17   :             vis = true;

  002e6	c6 44 24 10 01	 mov	 BYTE PTR _vis$1[esp+40], 1
$LN38@main:
; File D:\LABS\KPO\1\ConsoleApplication1\ConsoleApplication1.cpp

; 36   :         DaysUntil = 365 - DayNum(day, month, isLeap(year)) + 121;

  002eb	ff 74 24 10	 push	 DWORD PTR _vis$1[esp+40]
  002ef	8b 4c 24 18	 mov	 ecx, DWORD PTR _day$1$[esp+44]
  002f3	8b d3		 mov	 edx, ebx
  002f5	e8 00 00 00 00	 call	 ?DayNum@@YAHHH_N@Z	; DayNum
  002fa	b9 e6 01 00 00	 mov	 ecx, 486		; 000001e6H
$LN45@main:

; 37   :     }
; 38   :     cout << "Дней до ближайшего дня рождения: " << DaysUntil << endl;

  002ff	83 c4 04	 add	 esp, 4
  00302	2b c8		 sub	 ecx, eax
  00304	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@
  00309	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0030e	51		 push	 ecx
  0030f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00315	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0031a	8b c8		 mov	 ecx, eax
  0031c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00322	8b c8		 mov	 ecx, eax
  00324	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 39   : 
; 40   :     system("pause");

  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause@
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  00335	83 c4 04	 add	 esp, 4

; 41   :     return 0;
; 42   : }

  00338	33 c0		 xor	 eax, eax
  0033a	5f		 pop	 edi
  0033b	5e		 pop	 esi
  0033c	5b		 pop	 ebx
  0033d	8b 4c 24 18	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+28]
  00341	33 cc		 xor	 ecx, esp
  00343	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00348	8b e5		 mov	 esp, ebp
  0034a	5d		 pop	 ebp
  0034b	c3		 ret	 0
$LN3@main:

; 19   :         cout << "Введены некоректные данные";

  0034c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00352	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BL@BCKHDGFB@?B?b?e?d?e?m?$PL?5?m?e?j?n?p?e?j?r?m?$PL?e?5?d?$OA?m?m?$PL?e@
  00357	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 41   :     return 0;
; 42   : }

  0035c	8b 4c 24 24	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+40]
  00360	33 c0		 xor	 eax, eax
  00362	5f		 pop	 edi
  00363	5e		 pop	 esi
  00364	5b		 pop	 ebx
  00365	33 cc		 xor	 ecx, esp
  00367	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036c	8b e5		 mov	 esp, ebp
  0036e	5d		 pop	 ebp
  0036f	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 124  :             return _Ok;

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 125  :         }

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  0002b	84 c0		 test	 al, al
  0002d	75 08		 jne	 SHORT $LN2@sentry

; 118  :                 this->_Myostr._Osfx();

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 79   :             if (_Rdbuf) {

  00049	85 c9		 test	 ecx, ecx
  0004b	74 05		 je	 SHORT $LN5@sentry

; 80   :                 _Rdbuf->_Unlock();

  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 119  :             }
; 120  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5e		 pop	 esi
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0002d	89 3e		 mov	 DWORD PTR [esi], edi

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002f	8b 17		 mov	 edx, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00031	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00034	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 72   :             if (_Rdbuf) {

  00038	85 c9		 test	 ecx, ecx
  0003a	74 07		 je	 SHORT $LN8@sentry

; 73   :                 _Rdbuf->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
  00041	8b 17		 mov	 edx, DWORD PTR [edi]
$LN8@sentry:

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 272  :         return _Mystate;

  0004a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 291  :         return rdstate() == ios_base::goodbit;

  0004d	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0

; 272  :         return _Mystate;

  00052	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 92   :             if (!_Ostr.good()) {

  00055	74 04		 je	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  00057	32 c0		 xor	 al, al

; 94   :                 return;

  00059	eb 22		 jmp	 SHORT $LN23@sentry
$LN2@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 69   :         return _Tiestr;

  0005b	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  0005e	85 c9		 test	 ecx, ecx
  00060	74 19		 je	 SHORT $LN4@sentry
  00062	3b cf		 cmp	 ecx, edi
  00064	74 15		 je	 SHORT $LN4@sentry

; 100  :                 return;
; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 291  :         return rdstate() == ios_base::goodbit;

  0006c	8b 07		 mov	 eax, DWORD PTR [edi]
  0006e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00071	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  00076	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00079	eb 02		 jmp	 SHORT $LN23@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  0007b	b0 01		 mov	 al, 1
$LN23@sentry:

; 105  :         }

  0007d	88 46 04	 mov	 BYTE PTR [esi+4], al
  00080	8b c6		 mov	 eax, esi
  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 79   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 81   :             }
; 82   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 72   :             if (_Rdbuf) {

  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN6@Sentry_bas

; 73   :                 _Rdbuf->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN6@Sentry_bas:

; 74   :             }
; 75   :         }

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -48						; size = 8
__Pad$ = -48						; size = 8
__State$ = -36						; size = 4
__Val$1$ = -32						; size = 4
$T14 = -32						; size = 1
tv664 = -28						; size = 4
$T8 = -28						; size = 1
__Ostr$ = -24						; size = 4
__Count$2$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; __Ostr$ = ecx
; __Val$ = edx

; 731  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c2		 mov	 eax, edx
  0002d	89 45 e0	 mov	 DWORD PTR __Val$1$[ebp], eax
  00030	8b d9		 mov	 ebx, ecx
  00032	89 5d e8	 mov	 DWORD PTR __Ostr$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00035	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 735  :     ios_base::iostate _State = ios_base::goodbit;

  00037	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0003e	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL92@operator:
  00041	8a 01		 mov	 al, BYTE PTR [ecx]
  00043	41		 inc	 ecx
  00044	84 c0		 test	 al, al
  00046	75 f9		 jne	 SHORT $LL92@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 737  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00048	8b 13		 mov	 edx, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004a	2b ce		 sub	 ecx, esi
  0004c	89 4d ec	 mov	 DWORD PTR __Count$2$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 359  :         return _Wide;

  0004f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00052	03 c3		 add	 eax, ebx
  00054	89 45 e4	 mov	 DWORD PTR tv664[ebp], eax
  00057	8b 78 24	 mov	 edi, DWORD PTR [eax+36]
  0005a	8b 70 20	 mov	 esi, DWORD PTR [eax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 737  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0005d	85 ff		 test	 edi, edi
  0005f	7c 17		 jl	 SHORT $LN17@operator
  00061	7f 0e		 jg	 SHORT $LN94@operator
  00063	85 f6		 test	 esi, esi
  00065	74 11		 je	 SHORT $LN17@operator
  00067	85 ff		 test	 edi, edi
  00069	7c 0d		 jl	 SHORT $LN17@operator
  0006b	7f 04		 jg	 SHORT $LN94@operator
  0006d	3b f1		 cmp	 esi, ecx
  0006f	76 07		 jbe	 SHORT $LN17@operator
$LN94@operator:
  00071	2b f1		 sub	 esi, ecx
  00073	83 df 00	 sbb	 edi, 0
  00076	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00078	0f 57 c0	 xorps	 xmm0, xmm0
  0007b	66 0f 13 45 d0	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  00080	8b 7d d4	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  00083	8b 75 d0	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00086	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00089	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0008b	89 5d d0	 mov	 DWORD PTR __Ok$[ebp], ebx

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();
; 72   :             if (_Rdbuf) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0f		 je	 SHORT $LN39@operator

; 73   :                 _Rdbuf->_Lock();

  00092	8b 4d e4	 mov	 ecx, DWORD PTR tv664[ebp]
  00095	8b 00		 mov	 eax, DWORD PTR [eax]
  00097	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  0009a	ff 50 04	 call	 DWORD PTR [eax+4]
  0009d	8b 13		 mov	 edx, DWORD PTR [ebx]
  0009f	8b ca		 mov	 ecx, edx
$LN39@operator:

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 272  :         return _Mystate;

  000a8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ab	03 c3		 add	 eax, ebx

; 291  :         return rdstate() == ios_base::goodbit;

  000ad	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 92   :             if (!_Ostr.good()) {

  000b1	74 04		 je	 SHORT $LN33@operator

; 93   :                 _Ok = false;

  000b3	32 c0		 xor	 al, al

; 94   :                 return;

  000b5	eb 26		 jmp	 SHORT $LN107@operator
$LN33@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 69   :         return _Tiestr;

  000b7	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  000ba	85 c0		 test	 eax, eax
  000bc	74 1d		 je	 SHORT $LN35@operator
  000be	3b c3		 cmp	 eax, ebx
  000c0	74 19		 je	 SHORT $LN35@operator

; 100  :                 return;
; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  000c2	8b c8		 mov	 ecx, eax
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000ca	8b 13		 mov	 edx, DWORD PTR [ebx]
  000cc	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 272  :         return _Mystate;

  000ce	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 291  :         return rdstate() == ios_base::goodbit;

  000d1	83 7c 18 0c 00	 cmp	 DWORD PTR [eax+ebx+12], 0
  000d6	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d9	eb 02		 jmp	 SHORT $LN107@operator
$LN35@operator:

; 99   :                 _Ok = true;

  000db	b0 01		 mov	 al, 1
$LN107@operator:

; 738  :     const typename _Myos::sentry _Ok(_Ostr);

  000dd	88 45 d4	 mov	 BYTE PTR __Ok$[ebp+4], al
  000e0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 739  : 
; 740  :     if (!_Ok) {

  000e7	84 c0		 test	 al, al
  000e9	75 0a		 jne	 SHORT $LN8@operator

; 741  :         _State |= ios_base::badbit;

  000eb	b9 04 00 00 00	 mov	 ecx, 4

; 742  :     } else { // state okay, insert

  000f0	e9 e7 00 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 743  :         _TRY_IO_BEGIN

  000f5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 322  :         return _Fmtfl;

  000f9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000fc	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 744  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00100	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00105	83 f8 40	 cmp	 eax, 64			; 00000040H
  00108	74 3d		 je	 SHORT $LN87@operator
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL4@operator:

; 745  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00110	85 ff		 test	 edi, edi
  00112	7c 31		 jl	 SHORT $LN89@operator
  00114	7f 04		 jg	 SHORT $LN95@operator
  00116	85 f6		 test	 esi, esi
  00118	74 2b		 je	 SHORT $LN89@operator
$LN95@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 100  :         return _Fillch;

  0011a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0011c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011f	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 746  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00123	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 100  :         return _Fillch;

  00127	88 45 e4	 mov	 BYTE PTR $T8[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 746  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0012a	ff 75 e4	 push	 DWORD PTR $T8[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00133	83 f8 ff	 cmp	 eax, -1
  00136	75 05		 jne	 SHORT $LN2@operator

; 747  :                     _State |= ios_base::badbit; // insertion failed, quit

  00138	8d 48 05	 lea	 ecx, DWORD PTR [eax+5]

; 748  :                     break;

  0013b	eb 61		 jmp	 SHORT $LN6@operator
$LN2@operator:

; 745  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0013d	83 c6 ff	 add	 esi, -1
  00140	83 d7 ff	 adc	 edi, -1
  00143	eb cb		 jmp	 SHORT $LL4@operator
$LN89@operator:

; 753  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00145	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LN87@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00147	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 753  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0014a	6a 00		 push	 0
  0014c	ff 75 ec	 push	 DWORD PTR __Count$2$[ebp]
  0014f	ff 75 e0	 push	 DWORD PTR __Val$1$[ebp]
  00152	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  0015c	3b 45 ec	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  0015f	75 2c		 jne	 SHORT $LN96@operator
  00161	85 d2		 test	 edx, edx
  00163	75 28		 jne	 SHORT $LN96@operator
$LL98@operator:

; 754  :             _State |= ios_base::badbit;
; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit) {
; 758  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00165	85 ff		 test	 edi, edi
  00167	7c 33		 jl	 SHORT $LN102@operator
  00169	7f 04		 jg	 SHORT $LN97@operator
  0016b	85 f6		 test	 esi, esi
  0016d	74 2d		 je	 SHORT $LN102@operator
$LN97@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 100  :         return _Fillch;

  0016f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00171	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00174	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 759  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00178	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 100  :         return _Fillch;

  0017c	88 45 e0	 mov	 BYTE PTR $T14[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 759  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0017f	ff 75 e0	 push	 DWORD PTR $T14[ebp]
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00188	83 f8 ff	 cmp	 eax, -1
  0018b	75 07		 jne	 SHORT $LN5@operator
$LN96@operator:

; 760  :                     _State |= ios_base::badbit; // insertion failed, quit
; 761  :                     break;
; 762  :                 }
; 763  :             }
; 764  :         }
; 765  : 
; 766  :         _Ostr.width(0);

  0018d	b9 04 00 00 00	 mov	 ecx, 4
  00192	eb 0a		 jmp	 SHORT $LN6@operator
$LN5@operator:

; 754  :             _State |= ios_base::badbit;
; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit) {
; 758  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00194	83 c6 ff	 add	 esi, -1
  00197	83 d7 ff	 adc	 edi, -1
  0019a	eb c9		 jmp	 SHORT $LL98@operator
$LN102@operator:

; 760  :                     _State |= ios_base::badbit; // insertion failed, quit
; 761  :                     break;
; 762  :                 }
; 763  :             }
; 764  :         }
; 765  : 
; 766  :         _Ostr.width(0);

  0019c	33 c9		 xor	 ecx, ecx
$LN6@operator:
  0019e	8b 03		 mov	 eax, DWORD PTR [ebx]
  001a0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 364  :         _Wide                      = _Newwidth;

  001a3	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  001ab	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
  001b3	eb 20		 jmp	 SHORT $LN108@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 767  :         _CATCH_IO_(ios_base, _Ostr)

  001b5	8b 55 e8	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001b8	6a 01		 push	 1
  001ba	6a 04		 push	 4
  001bc	8b 02		 mov	 eax, DWORD PTR [edx]
  001be	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001c1	03 ca		 add	 ecx, edx
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  001c9	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001ce	c3		 ret	 0
$LN23@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
  001cf	8b 5d e8	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  001d2	8b 4d dc	 mov	 ecx, DWORD PTR __State$[ebp]
$LN108@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 768  :     }
; 769  : 
; 770  :     _Ostr.setstate(_State);

  001d5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN22@operator:
  001dc	8b 03		 mov	 eax, DWORD PTR [ebx]
  001de	6a 00		 push	 0
  001e0	51		 push	 ecx
  001e1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e4	03 cb		 add	 ecx, ebx
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  001ec	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  001f9	8b 75 d0	 mov	 esi, DWORD PTR __Ok$[ebp]
  001fc	84 c0		 test	 al, al
  001fe	75 08		 jne	 SHORT $LN72@operator

; 118  :                 this->_Myostr._Osfx();

  00200	8b ce		 mov	 ecx, esi
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN72@operator:

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00208	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0020c	8b 06		 mov	 eax, DWORD PTR [esi]
  0020e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00211	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 79   :             if (_Rdbuf) {

  00215	85 c9		 test	 ecx, ecx
  00217	74 05		 je	 SHORT $LN99@operator

; 80   :                 _Rdbuf->_Unlock();

  00219	8b 01		 mov	 eax, DWORD PTR [ecx]
  0021b	ff 50 08	 call	 DWORD PTR [eax+8]
$LN99@operator:

; 771  :     return _Ostr;
; 772  : }

  0021e	8b c3		 mov	 eax, ebx
  00220	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00223	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022a	59		 pop	 ecx
  0022b	5f		 pop	 edi
  0022c	5e		 pop	 esi
  0022d	5b		 pop	 ebx
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 974  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 975  :     _Ostr.put(_Ostr.widen('\n'));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00007	6a 0a		 push	 10			; 0000000aH
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	03 ce		 add	 ecx, esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00016	0f b6 c8	 movzx	 ecx, al
  00019	51		 push	 ecx
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z

; 976  :     _Ostr.flush();

  00022	8b ce		 mov	 ecx, esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 977  :     return _Ostr;

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi

; 978  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
;	COMDAT ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z
_TEXT	SEGMENT
??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z PROC ; std::operator>><char,std::char_traits<char> >, COMDAT
; __Istr$ = ecx
; __Str$ = edx

; 825  : basic_istream<_Elem, _Traits>& operator>>(basic_istream<_Elem, _Traits>& _Istr, _Elem* _Str) {

  00000	51		 push	 ecx

; 826  :     return _Istream_extract_into_buffer(_Istr, SIZE_MAX, _Str);

  00001	52		 push	 edx
  00002	e8 00 00 00 00	 call	 ??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >
  00007	83 c4 04	 add	 esp, 4

; 827  : }

  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z ENDP ; std::operator>><char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
;	COMDAT ??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
_TEXT	SEGMENT
$T1 = -60						; size = 8
__Ok$ = -52						; size = 8
__State$ = -44						; size = 4
__Ctype_fac$1$ = -40					; size = 4
tv522 = -36						; size = 4
__Current$ = -32					; size = 4
__Istr$ = -28						; size = 4
__Count$1$ = -24					; size = 4
__$EHRec$ = -16						; size = 16
__Str$ = 8						; size = 4
??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z PROC ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >, COMDAT
; __Istr$ = ecx
; __Size$dead$ = edx

; 760  :     basic_istream<_Elem, _Traits>& _Istr, size_t _Size, _Elem* _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e4	 mov	 DWORD PTR __Istr$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 763  :     ios_base::iostate _State = ios_base::goodbit;

  00032	33 db		 xor	 ebx, ebx

; 764  :     size_t _Current          = 0;

  00034	33 f6		 xor	 esi, esi
  00036	89 5d d4	 mov	 DWORD PTR __State$[ebp], ebx
  00039	89 75 e0	 mov	 DWORD PTR __Current$[ebp], esi

; 79   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  0003c	89 7d cc	 mov	 DWORD PTR __Ok$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0003f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00042	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 81   :             if (_Rdbuf) {

  00046	85 c9		 test	 ecx, ecx
  00048	74 05		 je	 SHORT $LN25@Istream_ex

; 82   :                 _Rdbuf->_Lock();

  0004a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004c	ff 50 04	 call	 DWORD PTR [eax+4]
$LN25@Istream_ex:

; 101  :             : _Sentry_base(_Istr), _Ok(_Sentry_base::_Myistr._Ipfx(_Noskip)) {}

  0004f	6a 00		 push	 0
  00051	8b cf		 mov	 ecx, edi
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00060	88 45 d0	 mov	 BYTE PTR __Ok$[ebp+4], al

; 765  :     const typename _Myis::sentry _Ok(_Istr);

  00063	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 766  : 
; 767  :     if (_Ok) { // state okay, extract characters

  0006a	84 c0		 test	 al, al
  0006c	0f 84 d5 00 00
	00		 je	 $LN19@Istream_ex

; 768  :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Istr.getloc());

  00072	8d 45 c4	 lea	 eax, DWORD PTR $T1[ebp]
  00075	50		 push	 eax
  00076	8b 07		 mov	 eax, DWORD PTR [edi]
  00078	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007b	03 cf		 add	 ecx, edi
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  00083	50		 push	 eax
  00084	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00088	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale

; 346  :         if (_Ptr) {

  0008d	8b 4d c8	 mov	 ecx, DWORD PTR $T1[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 768  :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Istr.getloc());

  00090	83 c4 04	 add	 esp, 4
  00093	89 45 d8	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale

; 346  :         if (_Ptr) {

  00096	85 c9		 test	 ecx, ecx
  00098	74 11		 je	 SHORT $LN32@Istream_ex

; 347  :             delete _Ptr->_Decref();

  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	ff 52 08	 call	 DWORD PTR [edx+8]
  0009f	85 c0		 test	 eax, eax
  000a1	74 08		 je	 SHORT $LN32@Istream_ex
  000a3	8b 10		 mov	 edx, DWORD PTR [eax]
  000a5	8b c8		 mov	 ecx, eax
  000a7	6a 01		 push	 1
  000a9	ff 12		 call	 DWORD PTR [edx]
$LN32@Istream_ex:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 770  :         _TRY_IO_BEGIN

  000ab	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3

; 771  :         size_t _Count       = _Size;

  000af	83 c9 ff	 or	 ecx, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 359  :         return _Wide;

  000b2	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 771  :         size_t _Count       = _Size;

  000b4	89 4d e8	 mov	 DWORD PTR __Count$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 359  :         return _Wide;

  000b7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ba	03 c7		 add	 eax, edi
  000bc	89 45 dc	 mov	 DWORD PTR tv522[ebp], eax
  000bf	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 773  :         if (_Width > 0 && _Width < _Size) {

  000c2	85 d2		 test	 edx, edx
  000c4	74 09		 je	 SHORT $LN7@Istream_ex
  000c6	83 fa ff	 cmp	 edx, -1
  000c9	0f 42 ca	 cmovb	 ecx, edx
  000cc	89 4d e8	 mov	 DWORD PTR __Count$1$[ebp], ecx
$LN7@Istream_ex:

; 774  :             _Count = _Width;
; 775  :         }
; 776  : 
; 777  :         typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();

  000cf	8b 4d dc	 mov	 ecx, DWORD PTR tv522[ebp]
  000d2	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
$LN61@Istream_ex:

; 780  :         for (; _Current < _Count - 1; _Meta = _Istr.rdbuf()->snextc(), (void) ++_Current) {

  000db	8b 4d e8	 mov	 ecx, DWORD PTR __Count$1$[ebp]
  000de	8b d0		 mov	 edx, eax
  000e0	49		 dec	 ecx
  000e1	3b f1		 cmp	 esi, ecx
  000e3	73 5b		 jae	 SHORT $LN12@Istream_ex

; 781  :             if (_Traits::eq_int_type(_Traits::eof(), _Meta)) { // end of file, quit

  000e5	83 fa ff	 cmp	 edx, -1
  000e8	75 05		 jne	 SHORT $LN8@Istream_ex

; 782  :                 _State |= ios_base::eofbit;

  000ea	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]

; 783  :                 break;

  000ed	eb 51		 jmp	 SHORT $LN12@Istream_ex
$LN8@Istream_ex:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2611 :         return (_Ctype._Table[static_cast<unsigned char>(_Ch)] & _Maskval) != 0;

  000ef	8b 45 d8	 mov	 eax, DWORD PTR __Ctype_fac$1$[ebp]
  000f2	0f b6 ca	 movzx	 ecx, dl
  000f5	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000f8	f6 04 48 48	 test	 BYTE PTR [eax+ecx*2], 72 ; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 784  :             } else if (_Ctype_fac.is(_Ctype::space, _Ch = _Traits::to_char_type(_Meta)) || _Ch == _Elem()) {

  000fc	75 42		 jne	 SHORT $LN12@Istream_ex
  000fe	84 d2		 test	 dl, dl
  00100	74 3e		 je	 SHORT $LN12@Istream_ex

; 785  :                 break; // whitespace or nul, quit
; 786  :             } else {
; 787  :                 _Str[_Current] = _Traits::to_char_type(_Meta); // add it to string

  00102	8b 45 08	 mov	 eax, DWORD PTR __Str$[ebp]
  00105	88 14 06	 mov	 BYTE PTR [esi+eax], dl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00108	8b 07		 mov	 eax, DWORD PTR [edi]
  0010a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 780  :         for (; _Current < _Count - 1; _Meta = _Istr.rdbuf()->snextc(), (void) ++_Current) {

  0010d	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  00117	46		 inc	 esi
  00118	89 75 e0	 mov	 DWORD PTR __Current$[ebp], esi
  0011b	eb be		 jmp	 SHORT $LN61@Istream_ex
__catch$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$0:

; 788  :             }
; 789  :         }
; 790  :         _CATCH_IO_(ios_base, _Istr)

  0011d	8b 55 e4	 mov	 edx, DWORD PTR __Istr$[ebp]
  00120	6a 01		 push	 1
  00122	6a 04		 push	 4
  00124	8b 02		 mov	 eax, DWORD PTR [edx]
  00126	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00129	03 ca		 add	 ecx, edx
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00131	b8 00 00 00 00	 mov	 eax, $LN20@Istream_ex
  00136	c3		 ret	 0
$LN20@Istream_ex:

; 766  : 
; 767  :     if (_Ok) { // state okay, extract characters

  00137	8b 7d e4	 mov	 edi, DWORD PTR __Istr$[ebp]
  0013a	8b 5d d4	 mov	 ebx, DWORD PTR __State$[ebp]
  0013d	8b 75 e0	 mov	 esi, DWORD PTR __Current$[ebp]
$LN12@Istream_ex:

; 791  :     }
; 792  :     __analysis_assume(static_cast<size_t>(_Current) < _Size); // TRANSITION, VSO-860375
; 793  :     _Str[_Current] = _Elem(); // add terminating null character

  00140	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN19@Istream_ex:
  00147	8b 45 08	 mov	 eax, DWORD PTR __Str$[ebp]
  0014a	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 794  :     _Istr.width(0);

  0014e	8b 07		 mov	 eax, DWORD PTR [edi]
  00150	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 364  :         _Wide                      = _Newwidth;

  00153	c7 44 38 20 00
	00 00 00	 mov	 DWORD PTR [eax+edi+32], 0
  0015b	c7 44 38 24 00
	00 00 00	 mov	 DWORD PTR [eax+edi+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 795  :     if (_Current == 0) {

  00163	85 f6		 test	 esi, esi
  00165	75 03		 jne	 SHORT $LN13@Istream_ex

; 796  :         _State |= ios_base::failbit;

  00167	83 cb 02	 or	 ebx, 2
$LN13@Istream_ex:

; 797  :     }
; 798  :     _Istr.setstate(_State);

  0016a	8b 07		 mov	 eax, DWORD PTR [edi]
  0016c	6a 00		 push	 0
  0016e	53		 push	 ebx
  0016f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00172	03 cf		 add	 ecx, edi
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 86   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept {

  0017a	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00181	8b 4d cc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00184	8b 01		 mov	 eax, DWORD PTR [ecx]
  00186	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00189	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 88   :             if (_Rdbuf) {

  0018d	85 c9		 test	 ecx, ecx
  0018f	74 05		 je	 SHORT $LN58@Istream_ex

; 89   :                 _Rdbuf->_Unlock();

  00191	8b 01		 mov	 eax, DWORD PTR [ecx]
  00193	ff 50 08	 call	 DWORD PTR [eax+8]
$LN58@Istream_ex:

; 799  :     return _Istr;
; 800  : }

  00196	8b c7		 mov	 eax, edi
  00198	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0019b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a2	59		 pop	 ecx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$4:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$2:
  00008	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__unwindfunclet$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z$3:
  00010	8d 4d c4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Istream_extract_into_buffer@DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@IPAD@Z ENDP ; std::_Istream_extract_into_buffer<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 86   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept {

  00022	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 87   :             const auto _Rdbuf = _Myistr.rdbuf();

  00029	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00030	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 88   :             if (_Rdbuf) {

  00034	85 c9		 test	 ecx, ecx
  00036	74 05		 je	 SHORT $LN4@sentry

; 89   :                 _Rdbuf->_Unlock();

  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	ff 50 08	 call	 DWORD PTR [eax+8]
$LN4@sentry:
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 104  :             return _Ok;

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 105  :         }

  00003	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$dead$ = 12					; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 101  :             : _Sentry_base(_Istr), _Ok(_Sentry_base::_Myistr._Ipfx(_Noskip)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 79   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  00029	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0002c	89 16		 mov	 DWORD PTR [esi], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0002e	8b 02		 mov	 eax, DWORD PTR [edx]
  00030	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00033	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 81   :             if (_Rdbuf) {

  00037	85 c9		 test	 ecx, ecx
  00039	74 05		 je	 SHORT $LN5@sentry

; 82   :                 _Rdbuf->_Lock();

  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	ff 50 04	 call	 DWORD PTR [eax+4]
$LN5@sentry:

; 101  :             : _Sentry_base(_Istr), _Ok(_Sentry_base::_Myistr._Ipfx(_Noskip)) {}

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00049	6a 00		 push	 0
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00051	88 46 04	 mov	 BYTE PTR [esi+4], al
  00054	8b c6		 mov	 eax, esi
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 86   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 87   :             const auto _Rdbuf = _Myistr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 88   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 89   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 90   :             }
; 91   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 79   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 79   :         return _Mystrbuf;

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\istream

; 81   :             if (_Rdbuf) {

  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN6@Sentry_bas

; 82   :                 _Rdbuf->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN6@Sentry_bas:

; 83   :             }
; 84   :         }

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z PROC ; std::_Narrow_char_traits<char,int>::to_char_type, COMDAT

; 453  :     _NODISCARD static constexpr _Elem to_char_type(const int_type& _Meta) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 454  :         return static_cast<_Elem>(_Meta);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 455  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ENDP ; std::_Narrow_char_traits<char,int>::to_char_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$6 = -28						; size = 4
__Psave_guard$7 = -24					; size = 4
__Lock$8 = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 422  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR __Loc$[ebp]

; 423  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  0002e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00031	6a 00		 push	 0
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 424  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave

; 425  : 
; 426  :     const size_t _Id         = _Facet::id;

  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  0004b	89 45 e4	 mov	 DWORD PTR __Psave$6[ebp], eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  00054	8b f8		 mov	 edi, eax

; 369  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00056	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00059	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  0005c	73 0c		 jae	 SHORT $LN15@use_facet
  0005e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00061	8b 34 b9	 mov	 esi, DWORD PTR [ecx+edi*4]

; 370  :         if (_Facptr || !_Ptr->_Xparent) {

  00064	85 f6		 test	 esi, esi
  00066	75 5c		 jne	 SHORT $LN32@use_facet
  00068	eb 02		 jmp	 SHORT $LN34@use_facet
$LN15@use_facet:

; 369  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0006a	33 f6		 xor	 esi, esi
$LN34@use_facet:

; 370  :         if (_Facptr || !_Ptr->_Xparent) {

  0006c	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00070	74 11		 je	 SHORT $LN10@use_facet

; 371  :             return _Facptr; // found facet or not transparent
; 372  :         }
; 373  : 
; 374  :         // look in current locale
; 375  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ

; 376  :         if (_Id < _Ptr0->_Facetcount) {

  00078	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  0007b	73 0a		 jae	 SHORT $LN35@use_facet

; 377  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  0007d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00080	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN10@use_facet:

; 427  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 428  : 
; 429  :     if (!_Pf) {

  00083	85 f6		 test	 esi, esi
  00085	75 3d		 jne	 SHORT $LN32@use_facet
$LN35@use_facet:

; 430  :         if (_Psave) {

  00087	8b 75 e4	 mov	 esi, DWORD PTR __Psave$6[ebp]
  0008a	85 f6		 test	 esi, esi
  0008c	75 36		 jne	 SHORT $LN32@use_facet

; 431  :             _Pf = _Psave; // lazy facet already allocated
; 432  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  0008e	8d 45 e4	 lea	 eax, DWORD PTR __Psave$6[ebp]
  00091	53		 push	 ebx
  00092	50		 push	 eax
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00099	83 c4 08	 add	 esp, 8
  0009c	83 f8 ff	 cmp	 eax, -1
  0009f	74 4a		 je	 SHORT $LN40@use_facet

; 435  : #else // _HAS_EXCEPTIONS
; 436  :             _CSTD abort(); // lazy disallowed
; 437  : #endif // _HAS_EXCEPTIONS
; 438  :         } else { // queue up lazy facet for destruction
; 439  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  000a1	8b 75 e4	 mov	 esi, DWORD PTR __Psave$6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  000a4	89 75 e8	 mov	 DWORD PTR __Psave_guard$7[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale

; 445  :             _Facet_Register(_Pfmod);

  000a7	56		 push	 esi
  000a8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ac	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 446  : #endif // defined(_M_CEE)
; 447  : 
; 448  :             _Pfmod->_Incref();

  000b1	8b 06		 mov	 eax, DWORD PTR [esi]
  000b3	83 c4 04	 add	 esp, 4
  000b6	8b ce		 mov	 ecx, esi
  000b8	ff 50 04	 call	 DWORD PTR [eax+4]

; 449  :             _Facetptr<_Facet>::_Psave = _Psave;

  000bb	8b 75 e4	 mov	 esi, DWORD PTR __Psave$6[ebp]
  000be	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
$LN32@use_facet:

; 450  :             _Pf                       = _Psave;
; 451  : 
; 452  :             (void) _Psave_guard.release();
; 453  :         }
; 454  :     }
; 455  : 
; 456  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  000c4	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000cd	8b c6		 mov	 eax, esi

; 457  :     _END_LOCK()
; 458  : } // end of use_facet body

  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e0	33 cd		 xor	 ecx, ebp
  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
$LN40@use_facet:

; 433  : #if _HAS_EXCEPTIONS
; 434  :             _Throw_bad_cast(); // lazy disallowed

  000eb	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast
$LN37@use_facet:
  000f0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00009	8d 4d e8	 lea	 ecx, DWORD PTR __Psave_guard$7[ebp]
  0000c	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00016	90		 npad	 1
  00017	90		 npad	 1
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 368  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 369  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  0000a	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000d	73 0c		 jae	 SHORT $LN6@Getfacet
  0000f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00012	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 370  :         if (_Facptr || !_Ptr->_Xparent) {

  00015	85 c0		 test	 eax, eax
  00017	75 22		 jne	 SHORT $LN1@Getfacet
  00019	eb 02		 jmp	 SHORT $LN8@Getfacet
$LN6@Getfacet:

; 369  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0001b	33 c0		 xor	 eax, eax
$LN8@Getfacet:

; 370  :         if (_Facptr || !_Ptr->_Xparent) {

  0001d	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00021	74 18		 je	 SHORT $LN1@Getfacet

; 371  :             return _Facptr; // found facet or not transparent
; 372  :         }
; 373  : 
; 374  :         // look in current locale
; 375  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ

; 376  :         if (_Id < _Ptr0->_Facetcount) {

  00029	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  0002c	73 0b		 jae	 SHORT $LN4@Getfacet

; 377  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  0002e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00031	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00034	5e		 pop	 esi

; 381  :     }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN4@Getfacet:

; 378  :         }
; 379  : 
; 380  :         return nullptr; // no entry in current locale

  00039	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  0003b	5e		 pop	 esi

; 381  :     }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_typeinfo.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 137  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 138  :     }

  00003	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_typeinfo.h

; 137  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@

; 138  :     }

  00017	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00010	59		 pop	 ecx
  00011	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00016	83 c4 04	 add	 esp, 4
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN9@scalar
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN9@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_copy
  00024	83 c4 08	 add	 esp, 8
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 62   : [[noreturn]] inline void _Throw_bad_cast() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 63   :     _THROW(bad_cast{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  0000e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00013	8b c1		 mov	 eax, ecx
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001b	cc		 int	 3
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c2 04 00	 ret	 4
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z
_TEXT	SEGMENT
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1387 : }

  00002	c3		 ret	 0
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; _this$ = ecx

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b c1		 mov	 eax, ecx
  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; _this$ = ecx

; 3141 :     explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t{}, _Ptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory

; 3141 :     explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t{}, _Ptr) {}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; _this$dead$ = ecx

; 3088 :     void operator()(_Ty* _Ptr) const noexcept /* strengthened */ { // delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3089 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 3090 :         delete _Ptr;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0c		 je	 SHORT $LN3@operator
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	c7 45 08 01 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 1

; 3091 :     }

  00013	5d		 pop	 ebp

; 3089 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 3090 :         delete _Ptr;

  00014	ff 20		 jmp	 DWORD PTR [eax]
$LN3@operator:

; 3091 :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1340 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 3197 :         if (_Mypair._Myval2) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN6@unique_ptr

; 3090 :         delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN6@unique_ptr:

; 3198 :             _Mypair._Get_first()(_Mypair._Myval2);
; 3199 :         }
; 3200 :     }

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z
_TEXT	SEGMENT
??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z PROC ; std::exchange<std::_Facet_base *,std::nullptr_t>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 601  :     // assign _New_val to _Val, return previous _Val
; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00002	8b 12		 mov	 edx, DWORD PTR [edx]
  00004	89 11		 mov	 DWORD PTR [ecx], edx

; 604  :     return _Old_val;
; 605  : }

  00006	c3		 ret	 0
??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z ENDP ; std::exchange<std::_Facet_base *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory

; 3228 :     }

  00008	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT
; __First$ = ecx

; 389  :         // find length of null-terminated string
; 390  : #if _HAS_CXX17
; 391  : #ifdef __cpp_char8_t
; 392  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 393  : #if _HAS_U8_INTRINSICS
; 394  :             return __builtin_u8strlen(_First);
; 395  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 396  :             return _Primary_char_traits::length(_First);
; 397  : #endif // _HAS_U8_INTRINSICS
; 398  :         } else
; 399  : #endif // __cpp_char8_t
; 400  :         {
; 401  :             return __builtin_strlen(_First);
; 402  :         }
; 403  : #else // _HAS_CXX17
; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00000	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL3@length:
  00003	8a 01		 mov	 al, BYTE PTR [ecx]
  00005	41		 inc	 ecx
  00006	84 c0		 test	 al, al
  00008	75 f9		 jne	 SHORT $LL3@length
  0000a	2b ca		 sub	 ecx, edx
  0000c	8b c1		 mov	 eax, ecx

; 405  : #endif // _HAS_CXX17
; 406  :     }

  0000e	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :         _Data._What = _Message;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0000f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  00014	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 68   :     }

  00017	8b c1		 mov	 eax, ecx
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00010	59		 pop	 ecx

; 91   :     }

  00011	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00016	83 c4 04	 add	 esp, 4
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN6@scalar
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN6@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_copy
  00024	83 c4 08	 add	 esp, 8

; 74   :     }

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 461  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 462  :         return _Left == _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 463  :     }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 470  :         return static_cast<int_type>(EOF);

  00000	83 c8 ff	 or	 eax, -1

; 471  :     }

  00003	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 346  :         if (_Ptr) {

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 11		 je	 SHORT $LN4@locale

; 347  :             delete _Ptr->_Decref();

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	6a 01		 push	 1
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 348  :         }
; 349  :     }

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
END
